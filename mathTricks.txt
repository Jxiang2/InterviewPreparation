1. count subarray/substring length from index
    [a, b, c, d, e, f]
     0  1  2  3  4  5

    count number of elements from b to e = 4 - 1 + 1;
    count number of elements from X to Y = Y -X + 1;


2. inclusive adding for getting substring/ subarray
    subarray/substring of starting index X and ending index Y :
    [a, e, f, f, e, b]
     0  2  3  4  5  6
        X        Y

    1. get start point X; (2)
    2. get length of substring by length = Y - X + 1; (5-2+1=4)
    3. substring(X, X + [Y - X + 1]); (substring(2, 6))


3. midpoint
    1. odd array [a, b, c, d, e]
                  0  1  2  3  4
    midpoint = floor(len(array)/2) = floor(5/2) = 2 => c
    midpoint = (len(array)-1)/2

    2. even array [a, b, c, d]  (2 midpoints) 
                   0  1  2  3
    midpoint = len(array)/2 - 1 && len(array)/2 = 1, 2 => b, c
    midpoint = (len(array)-1)/2 ==> 3/2 = <-1.5-> ==> b, c

4. buy & sell
    +: buy
    -: sell
    2 - 3 + 3 - 6 + 6 - 7 = -5 => sell 5
    2 - 7 = -5 => sell 5